using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Meter_screening_application
{
    internal class Commands
    {
       
        int DELAY = 10000;


        public int MAXRETRY = 2;
        public Byte[] jig_command_500mA =
        {
         0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0B, 0x70, 0x01, 0x23
    };
        public Byte[] jig_response_500mA =
      {
          0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0C, 0x70, 0x64, 0x01, 0x23
    };

        public Byte[] jig_command_5A =
       {
         0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0B, 0x70, 0x02, 0x23
    };
        public Byte[] jig_response_5A =
        {
          0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0C, 0x70, 0x64, 0x02, 0x23
    };

        public Byte[] jig_response_closed =
        {
          0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0C, 0x70, 0x64, 0x00, 0x23
    };
        public int stt = 1;

        //24 31 50 48 4A 49 47 0B 70 02 23
        public Byte[] jig_off_command =
        {
     0x24, 0x31, 0x50, 0x48, 0x4A, 0x49, 0x47, 0x0B, 0x70, 0x00, 0x23
    };



        public byte[] meter_auth_code = {
    0x02, 0x01, 0x24, 0x00, 0x9B, 0x26, 0xE2, 0xA9, 0x29, 0xFD,
    0x3D, 0xFE, 0xEB, 0xD2, 0x8A, 0xC8, 0xA7, 0x47, 0x79, 0x70,
    0x55, 0x3B, 0xB2, 0x06, 0xF7, 0x55, 0x41, 0xA7, 0xF5, 0x59,
    0x8D, 0x41, 0x40, 0x1D, 0xA6, 0x38, 0x53, 0x01, 0x03
};

        public byte[] meter_auth_resp = {
   02 ,03, 06, 00 ,00 ,01 ,88, 0xA8 ,03
};
        public string meter_auth_resp_string = "02030600000188a803";
        public Byte[] meter_test_command = {
    0x02, 0x01, 0x48, 0x05 ,0x01 ,0x05, 0x00, 0x00, 0x00,
        0x48, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00 ,0x00 ,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ,0x7D ,
        0x61 ,0x03
 };
        public Byte[] meter_test_responsee =
{
    0x02, 0x03, 0x43, 0x05, 0x00, 0x01, 0x36, 0xFD,
    0x6E, 0x43, 0xFE, 0x65, 0x7B, 0x40, 0xC3, 0xD3,
    0x81, 0x40, 0x30, 0x9B, 0xE4, 0x43, 0x8B, 0xDC,
    0xEB, 0x43, 0x51, 0xD2, 0x4C, 0x44, 0x1F, 0x9C,
    0x53, 0x44, 0x5C, 0xEB, 0x6A, 0x44, 0x72, 0x9E,
    0x72, 0x44, 0x1B, 0xD5, 0xF2, 0x43, 0x00, 0x00,
    0x00, 0x00, 0x47, 0x81, 0xF9, 0x3E, 0xF7, 0x3E,
    0xF9, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66,
    0x48, 0x42, 0x10, 0x89, 0xE8, 0x03
};


        public byte[] meter_test_responsee2 =
    {
    0x02, 0x03, 0x43, 0x05, 0x00, 0x01, 0x06, 0xFD,
    0x6E, 0x23, 0xFE, 0x65, 0x7B, 0x00, 0xC3, 0xD3,
    0x81, 0x40, 0x30, 0x9B, 0xE4, 0x40, 0x8B, 0xDC,
    0xEB, 0x43, 0x51, 0xD2, 0x4C, 0x44, 0x1F, 0x9C,
    0x53, 0x04, 0x5C, 0xEB, 0x6A, 0x44, 0x71, 0x9E,
    0x72, 0x44, 0x1B, 0xD5, 0xF2, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x47, 0x01, 0xF9, 0x3E, 0xF7, 0x3E,
    0xF9, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66,
    0x48, 0x42, 0x10, 0x89, 0xE8, 0x03
};

        public byte[] RTCCheckCommand =
        {
         0x02 , 0x01 , 0x14 , 0x05 , 0x01 , 0x05 , 0x00 , 0x00 , 0x00 , 0x03 , 0x09, 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00, 0x00 , 0x00 , 0x00 , 0xE2,0x56 , 0x03
        };

        public string[] valuess = { "Current", "Voltage", "PF" };

        public string MASTERMETER, METER1, METER2, JIG;

        public Byte[] meter_result_1;
        public Byte[] meter_result_2;
        public int[] meter_authenticate = [1, 1, 1];
        public double[,] meter_result_data = new double[3, 6];
        public double[,] tolerance = new double[2, 6];
        public int retry = 1, delay = 2000;
        public int timeout = 5000;
        public double tolerancelevel = 0.7;
        public DateTime startTime;
        public bool jig_res_to_app = false, jig_response = false, master_meter_resp = false, meter_resp1 = false, meter_resp2 = false;
        public bool five_ampere = false, mili_ampere = false, app_to_be_started = false;
       public string jig_start_resp_string = "243150484a49470b726423";
    //  public string jig_start_resp_string = "181f32304a312f0b484017";             //for testing
        //{243150484a49470b726423}

        public string filepath = "C:\\Users\\VaibhavSinghal\\OneDrive - Sinhal Udyog pvt ltd\\Documents\\meter.txt";

        public string MeterNotGivingResponse = "020306050002838e03";
       // public string MeterNotGivingResponse = "020306050002838e03";             //for testing
        public byte[] meter_command_for_vi_check_second_firmware = {0x02,0x01,0x17,0x05,0x01 ,0x05,0x00,0x00,0x00,0x01,0x0C,0x00 , 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xFE,0xA6,0x03 };

        public bool ResponseMatchString(Byte[] resp1, string resp)
        {
            StringBuilder hex = new StringBuilder(resp1.Length * 2);
            foreach (byte b in resp1)
                hex.AppendFormat("{0:x2}", b);
            return hex.ToString().ToLower() == resp.ToLower();
        }
        public string PrintResponseString(Byte[] resp)
        {
            StringBuilder hex = new StringBuilder(resp.Length * 2);
            foreach (byte b in resp)
                hex.AppendFormat("{0:x2}", b);

            return (hex.ToString());

        }
        public float ByteArrayToFloat(byte[] byteArray, int startIndex, int length)
        {
            if (length != 4)
            {
                throw new ArgumentException("Length must be 4 for a float value.");
            }
            byte[] subArray = new byte[length];
            for (int i = startIndex; i < (startIndex + length); i++)
         
                subArray[i] = byteArray[i];
            

            return BitConverter.ToSingle(subArray, 0);
        }
        public void PrintResponse(Byte[] resp)
        {
            foreach (Byte b in resp) Console.Write(b + " ");
        }
        public bool ResponseMatch(Byte[] resp1, Byte[] resp2)
        {
            if (resp1.Length != resp2.Length) return false;
            StringBuilder hex = new StringBuilder(resp1.Length * 2);
            foreach (byte b in resp1)
                hex.AppendFormat("{0:x2}", b);
            string hex2 = BitConverter.ToString(resp2).Replace("-", "").ToLower();

            Console.WriteLine(hex2.ToString() + "      " + hex.ToString());

            return hex.ToString() == hex2.ToString();
        }

    }
}
